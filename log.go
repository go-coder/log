package log

import (
	"fmt"
	"os"
	"runtime"
	"strings"
	"time"

	"github.com/go-coder/logr"
	"github.com/spf13/pflag"
)

const (
	autoGeneratedName = "<autoGeneratedName>"
)

var (
	argV int
)

func init() {
	pflag.IntVar(&argV, "v", 2, "threshold for info output")
	pflag.Parse()
}

func New() logr.Logger {
	return &rlog{
		level:  0,
		name:   "",
		fields: make([]interface{}, 0),
	}
}

func (l *rlog) copy() *rlog {
	return &rlog{
		level:  l.level,
		name:   l.name,
		fields: append(make([]interface{}, 0), l.fields...),
	}
}

type rlog struct {
	level  int
	name   string
	fields []interface{}
}

var _ logr.InfoLogger = (*rlog)(nil)
var _ logr.Logger = (*rlog)(nil)

func (l rlog) Enabled() bool {
	return l.level <= argV
}

func (l *rlog) Info(msg string, kvList ...interface{}) {
	if l.Enabled() {
		l.output(msg, kvList...)
	}
}

func (l *rlog) Error(err error, msg string, kvList ...interface{}) {
	if err != nil {
		kvList = append(kvList, "error", err.Error())
	} else {
		kvList = append(kvList, "error", "nil")
	}
	l.output(msg, kvList...)
}

func (l *rlog) V(level int) logr.InfoLogger {
	out := l.copy()
	out.level = level
	return out
}

func (l *rlog) WithName(name string) logr.Logger {
	out := l.copy()
	if out.name == "" {
		out.name = name
	} else {
		out.name = out.name + "/" + name
	}
	return out
}

func (l *rlog) WithFields(kvList ...interface{}) logr.Logger {
	out := l.copy()
	out.fields = append(out.fields, kvList...)
	return out
}

func (l *rlog) output(msg string, kvList ...interface{}) {
	if len(kvList)%2 != 0 {
		panic("fields must be key-value pairs")
	}
	now := time.Now().Format("2006/1/2 15:04:05")
	// callDepth 0 represents current line
	_, file, line, ok := runtime.Caller(2)
	if !ok {
		file = autoGeneratedName
		line = 0
	}
	str := fmt.Sprintf("I%d %s %s:%d %s [%s] %s %s\n",
		l.level, now, file, line, l.name, msg, flatten(l.fields...), flatten(kvList...))
	os.Stderr.WriteString(str)
}

func flatten(kvList ...interface{}) string {
	buf := strings.Builder{}
	sep := ""
	for i := 0; i < len(kvList); i += 2 {
		buf.WriteString(sep)
		sep = " "
		buf.WriteString(kvList[i].(string))
		buf.WriteString("=")
		buf.WriteString(pretty(kvList[i+1]))
	}
	return buf.String()
}

func pretty(v interface{}) string {
	return fmt.Sprintf("%v", v)
}
